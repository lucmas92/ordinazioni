<?php

namespace Lucmas\Reservations\Model;

use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Database\Eloquent\Model;
use Astrotomic\Translatable\Translatable;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Yajra\Auditable\AuditableWithDeletesTrait;
use Illuminate\Database\Eloquent\SoftDeletes;


class Order extends Model
{

    const OPEN = 'OPEN';
    const CLOSE = 'CLOSE';

    use SoftDeletes, AuditableWithDeletesTrait;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function (Order $model) {
            if (!$model->number) {
                $number = Order::select('number')->max('number') + 1 ?? 1;
                // assicuro che le prime 4 cifre contengano l'anno
                $year = substr($number, 0, 4);
                $number = str_replace($year, date('Y'), $number);

                // peril primo ordine applico una convenzione
                if (Order::count() === 0)
                    $model->number = date('Y') . str_pad($number, 4, '0', STR_PAD_LEFT);
                else
                    $model->number = $number;
            }
        });
    }

    public function products()
    {
        return $this->belongsToMany(app(Product::class), 'order_products')
            ->orderBy('status')
            ->where('status', '=', OrderProduct::NEW)
            ->withPivot(['id', 'quantity', 'status']);

    }

    public function allproducts()
    {
        return $this->belongsToMany(app(Product::class), 'order_products')
            ->orderBy('status')
            ->withPivot(['id', 'quantity', 'status']);
    }

    public function table()
    {
        return $this->belongsTo(app(Table::class));
    }

    public function carts()
    {
        return $this->belongsToMany(app(Cart::class), 'carts_order');
    }

}
